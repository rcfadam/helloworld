package com.huiju.weixin.WeixinServer.util;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

import javax.imageio.ImageIO;

import com.swetake.util.Qrcode;

import jp.sourceforge.qrcode.QRCodeDecoder;
import jp.sourceforge.qrcode.data.QRCodeImage;
import jp.sourceforge.qrcode.exception.DecodingFailedException;

/**
 * 生成二维码工具类
 * 
 * @author rencf 2016年11月17日17:21:16
 */
public class QRCodeUtil {
	int imageSize =150;
	/**
	 * 封装二维码
	 * @param content
	 * @param imgPath
	 * @throws UnsupportedEncodingException 
	 */
	public void encodImage(String content, String imgPath) throws UnsupportedEncodingException {
		Qrcode qrcode = new Qrcode();
		qrcode.setQrcodeErrorCorrect('M');
		qrcode.setQrcodeEncodeMode('B');
		qrcode.setQrcodeVersion(7);
		System.out.println(content);
		byte[] buffer = content.getBytes("utf-8");
		BufferedImage bufferedImage = new BufferedImage(imageSize, imageSize, BufferedImage.TYPE_INT_RGB);
		Graphics2D graphics2d = bufferedImage.createGraphics();
		graphics2d.setBackground(Color.WHITE);
		graphics2d.clearRect(0, 0,imageSize, imageSize);
		graphics2d.setColor(Color.BLACK);
		int prefix = 2;
		if(buffer.length>0&&buffer.length<100){
			boolean[][] codeOut = qrcode.calQrcode(buffer);
			for (int i = 0; i < codeOut.length; i++) {
				for (int j = 0; j < codeOut.length; j++) {
					if(codeOut[i][j]){
						graphics2d.fillRect(j*3+prefix, i*3+prefix, 3, 3);
					}
				}
			}
		}else{
			   System.err.println("QRCode content bytes length = "+buffer.length + " not in [ 0,100]. "); 
		}
		graphics2d.dispose();
		bufferedImage.flush();
	    File imgFile = new File(imgPath); 
	    
        // 生成二维码QRCode图片 
        try {
			ImageIO.write(bufferedImage, "png", imgFile);
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	 	
	 /**
     * 解码二维码
     * @paramimgPath
     * @returnString
     */ 
    public String decoderQRCode(String imgPath) { 
 
       // QRCode 二维码图片的文件 
       File imageFile = new File(imgPath); 
 
       BufferedImage bufImg = null; 
       String decodedData = null; 
       try { 
           bufImg = ImageIO.read(imageFile); 
 
           QRCodeDecoder decoder = new QRCodeDecoder(); 
           decodedData = new String(decoder.decode(new J2SEImage(bufImg)),"utf-8"); 
       } catch (IOException e) { 
           System.out.println("Error: " + e.getMessage()); 
           e.printStackTrace(); 
       } catch (DecodingFailedException dfe) { 
           System.out.println("Error: " + dfe.getMessage()); 
           dfe.printStackTrace(); 
       } 
       return decodedData; 
    } 
     
    public static class J2SEImage implements QRCodeImage{
    	BufferedImage bufferImage;
    	
		public J2SEImage(BufferedImage bufferImage) {
			this.bufferImage = bufferImage;
		}

		@Override
		public int getHeight() {
			return bufferImage.getHeight();
		}

		@Override
		public int getPixel(int arg0, int arg1) {
			return bufferImage.getRGB(arg0, arg1);
		}

		@Override
		public int getWidth() {
			return bufferImage.getWidth();
		}
    	
    }
	
}
