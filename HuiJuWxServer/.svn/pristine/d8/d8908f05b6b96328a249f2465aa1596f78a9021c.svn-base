package com.huiju.weixin.WeixinServer.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.huiju.weixin.WeixinServer.bean.UserLockKeyBean;
import com.huiju.weixin.WeixinServer.mapper.KeyTbMapper;
import com.huiju.weixin.WeixinServer.mapper.LockKeyTbMapper;
import com.huiju.weixin.WeixinServer.model.KeyTb;
import com.huiju.weixin.WeixinServer.model.LockKeyTb;

/**
 * 处理锁和钥匙关系的业务类
 * 
 * @author rencf 2016年11月10日10:57:15
 */
@Service
public class LockKeyService {

	@Autowired
	private LockKeyTbMapper lockKeyTbMapper;
	@Autowired
	private KeyTbMapper keyTbMapper;
	
	// 解绑钥匙
	@Transactional
	public int unbindKey(String lockId, String keyId) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("lockId", lockId);
		map.put("keyId", keyId);
		return lockKeyTbMapper.deleteByLockIdAndKeyId(map);
	}
	// 添加钥匙
	@Transactional
	public int addKey(LockKeyTb lockKeyTb){
		lockKeyTb.preInsert();
		return lockKeyTbMapper.insert(lockKeyTb);
	}
	// 根据 活码值ticketID获取钥匙列表
	public KeyTb getKeyByTicketId(String ticketId){
		KeyTb keyTb = keyTbMapper.getByTicketId(ticketId);
		return keyTb==null?new KeyTb():keyTb;
	}
	// 根据keyID获取钥匙
	public KeyTb getKeyByKeyId(String keyId){
		KeyTb keyTb = keyTbMapper.getKeyTbByKeyId(keyId);
		return keyTb==null?new KeyTb():keyTb;
	}
	/** 根据lockId 获取钥匙列表
	 * 
	 * @param lockId
	 * @param manage  是否是管理钥匙    0普通钥匙  1 蓝牙钥匙
	 * @return
	 */
	public List<KeyTb> findKeyListByLockId(String lockId,Integer manage){
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("lockId", lockId);
		//map.put("manage", manage); 
		List<KeyTb> keyTbs = lockKeyTbMapper.findKeyTablesByLockId(map);
		return keyTbs==null?new ArrayList<KeyTb>():keyTbs;
	}
	// 修改钥匙
	@Transactional
	public int updateKey(KeyTb keyTb){
		return keyTbMapper.updateByPrimaryKey(keyTb);
	}
	
	/**
	 * 根据设备ID获取钥匙
	 * @param deviceId
	 * @return
	 */
	public UserLockKeyBean getKeyByDeviceId(String deviceId) {
		UserLockKeyBean key =  lockKeyTbMapper.getByDeviceId(deviceId);
		return key==null?new UserLockKeyBean():key;
	}
	/**保存表关系
	 * 
	 * @param key
	 */
	@Transactional
	public void save(LockKeyTb key) {
		lockKeyTbMapper.insert(key);
	}
	
	/**
	 * 
	 * @param key
	 * @param lockkey
	 * @return
	 */
	@Transactional
	public void addkey(KeyTb key, LockKeyTb lockkey) {
		key.preInsert();
		keyTbMapper.updateByPrimaryKey(key);
		lockkey.preInsert();
		lockKeyTbMapper.insert(lockkey);
	}
	
	/**
	 * 删除钥匙
	 * @param lockId
	 * @param keyId
	 */
	@Transactional
	public void deleteKey(String lockId, String keyId) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("lockId", lockId);
		map.put("keyId", keyId);
		lockKeyTbMapper.deleteByLockIdAndKeyId(map);
	}
	
	/**
	 * 根据keyId 获取key_tb记录
	 * @param keyId
	 * @return  
	 */
	public KeyTb getKeyTbByKeyId(String keyId) {
		 
		return keyTbMapper.getKeyTbByKeyId(keyId);
	}
	
	public List<Object> findLocksbydeviceId(String deviceId){
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("deviceId", deviceId);
		List<Object> list =  lockKeyTbMapper.findLocksbydeviceId(map);
		return list;
	}
}
