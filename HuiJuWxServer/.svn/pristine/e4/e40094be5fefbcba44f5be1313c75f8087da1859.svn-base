package com.huiju.weixin.WeixinServer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import com.alibaba.fastjson.JSONObject;
import com.huiju.weixin.WeixinServer.conf.StartupConfig;
import com.huiju.weixin.WeixinServer.model.KeyTb;
import com.huiju.weixin.WeixinServer.model.LockKeyTb;
import com.huiju.weixin.WeixinServer.model.UserLockTb;
import com.huiju.weixin.WeixinServer.service.LockKeyService;
import com.huiju.weixin.WeixinServer.service.UserLockService;
import com.huiju.weixin.WeixinServer.util.BleDeviceAuth;
import com.huiju.weixin.WeixinServer.util.BleDeviceAuth.KeyDeviceAuthBean;
import com.huiju.weixin.WeixinServer.util.BleDeviceAuth.NewParams;
import com.huiju.weixin.WeixinServer.util.IdGen;
import com.huiju.weixin.WeixinServer.util.WxCustomeMenu;

import me.chanjar.weixin.common.exception.WxErrorException;
import me.chanjar.weixin.common.util.http.SimplePostRequestExecutor;
import me.chanjar.weixin.mp.api.WxMpService;


@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(TomcatSslApplication.class)
@WebAppConfiguration
public class UserLockServiceTest {

	@Autowired
	private UserLockService userLockService;
	
	@Autowired
	private LockKeyService lockKeyService;
	private Logger logger = Logger.getLogger(UserLockServiceTest.class);
	
	@Autowired
	private BleDeviceAuth  bleDeviceAuth;
	
	@Autowired
	private StartupConfig startupConfig;
	
	//@Test
	public void test(){
		String openId="123";
		String deviceId="sdffki_123123_2";
		List<UserLockTb> list = userLockService.getLockByOpenIdAndDeviceId(openId, deviceId);
		logger.debug(list);
	}
	
	//@Test
	public void testTransactional(){
		String openId = "111";
		String lockId = "111";
		UserLockTb userLockTb = new UserLockTb();
		userLockTb.setLockId(lockId);
		userLockTb.setOpenId(openId);
		int i = userLockService.bindDevice(userLockTb);
		logger.debug("事务处理:改变的行数："+i);
	}
	
	//@Test
	public void testDeleteUserLock(){
		String openId = "oJ3fKwDDkQ6ykN1RrXOB3rENJrKY";
		String deviceId="gh_127f2e348655_759937fb6e625ec7";
		userLockService.unbindAllLockKey(openId, userLockService.getLockByOpenIdAndDeviceId(openId, deviceId));
	}
	
	//@Test
	public void testFindLockListByDeviceId(){
		String deviceId="gh_127f2e348655_759937fb6e625ec7";
		List<Object>  locks = lockKeyService.findLocksbydeviceId(deviceId);
		LockKeyTb lockkey = (LockKeyTb) locks.get(0);
		logger.debug(lockkey.getLockId());
	}

	//@Test
	public void testlockList(){
		String openId = "oJ3fKwDDkQ6ykN1RrXOB3rENJrKY";
		List<UserLockTb> list = userLockService.getLockByOpenId(openId);
		logger.debug(list);
	}
	//@Test
	public void testaddkey(){
		KeyTb key = new KeyTb();
		key.setState("1");//1启动 2禁止 首次添加 默认启动
		key.setPosition(1);
		key.setId(2);
		LockKeyTb lockkey = new LockKeyTb();
		lockkey.setKeyId("002E003A");
		lockkey.setLockId("12321312312");
		lockKeyService.addkey(key,lockkey);
	}
	//@Test
	public void testremovekey(){
		String lockId = "12321312312";
		String keyId="002E003A";
		KeyTb userLockKeyBean = lockKeyService.getKeyByKeyId(keyId);
		 logger.debug(userLockKeyBean.getId());
		 lockKeyService.deleteKey(lockId,keyId); 
			List<KeyTb> list = lockKeyService.findKeyListByLockId(lockId,1);
			logger.debug(list);
	}
	@Test
	public void testfindkey(){
		String lockId = "12321312312";
		List<KeyTb> list = lockKeyService.findKeyListByLockId(lockId,1);
		logger.debug(list);
	}
	//@Test
	public void testSaveDeviceIdAndQrcode(){
		List<KeyTb> keyList = new ArrayList<KeyTb>();
		for(int i=0;i<3;i++){
			KeyTb key = new KeyTb();
			key.setDeviceId("12312312");
			key.setQrcodeSerial(IdGen.createQrSerial(i+1));
			key.setTicketId("4324232323");
			keyList.add(key);
		}
		try {
			lockKeyService.saveDeviceIdAndQrcode(1, "25549", "D:/wx_device_qrcode.xls");
			//ImportDataToExcel.execute(keyList, "");
		} catch (IOException e) {
			e.printStackTrace();
		} catch (WxErrorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
	//@Test
	public void testUpdateDeviceParam(){
		
		List<KeyDeviceAuthBean> device_list = new ArrayList<KeyDeviceAuthBean>();
		 /*
		  * 修改设备属性参数说明：
		  * deviceId 
		  * mac 
		  * 连接协议
		  * 写入到设备的加密key
		  * 断开策略
		  * 连接策略
		  * 加密方法 
		  * 授权版本
		  * manufature 含有mac地址偏移
		  * serial number 含有mac地址偏移 
		  * 精简协议类型
		  */
		KeyDeviceAuthBean deviceBean = new BleDeviceAuth().new KeyDeviceAuthBean("gh_127f2e348655_8f09abd5ae758eae","FD6B273F4B82","3","","1","1","0","0","-1","-2","0");
		device_list.add(deviceBean);
		/*
		 * op_type:0 授权,1更新
		 */
		NewParams newParams=bleDeviceAuth.getNewParams(device_list.size()+"", device_list, "1", "25549");
		String params = JSONObject.toJSONString(newParams);
		try {
			bleDeviceAuth.moreBleDeviceAuth("",params);
		} catch (IOException | WxErrorException e) {
			e.printStackTrace();
		}
	}
	
	//@Test
	public void testRemotebind(){
		WxMpService wxMpService = startupConfig.getWxMpService();
		String url = "https://api.weixin.qq.com/device/compel_bind";
		//String lockId = "123";
		String openId = "oJ3fKwHXbgTHpaBcIgZlUepg2qRI";
		String deviceId = "gh_127f2e348655_d2ed7f234225257e";
		try {
			String data = JSONObject.toJSONString(new Data(deviceId,openId));
			
			//String result2 = wxMpService.execute(new SimplePostRequestExecutor() , "https://api.weixin.qq.com/device/compel_unbind", data);
			
			String result = wxMpService.execute(new SimplePostRequestExecutor() , url, data);
			logger.info("-----"+result);
		} catch (WxErrorException e) {
			e.printStackTrace();
		}
		
	}
	//@Test
    public void testCreateWxMenu(){
    	WxMpService wxMpService = startupConfig.getWxMpService();
		try {
			new WxCustomeMenu().createCustomeMenu2(wxMpService.getAccessToken());
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} catch (WxErrorException e) {
			System.out.println(e.getMessage());
		}
    }
	//@Test
	public void testCreateQrcode(){
		/**
		 * 生成临时二维码 POST请求， 数据格式json，格式是{"expire_seconds": 604800, "action_name":
		 * "QR_SCENE", "action_info": {"scene": {"scene_id": 123}}}
		 */
		/*String url = "https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=ACCESSTOKEN";
		WxMpService wxMpService = startupConfig.getWxMpService();
		try {
			WxMpQrCodeTicket qrticket = wxMpService.qrCodeCreateLastTicket("0100000001232221");
			logger.info(qrticket.getTicket()+"---"+qrticket.getUrl()+"----"+qrticket.getExpire_seconds());
		} catch (WxErrorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		String ss = "qrscene_0100000001232221";
		logger.info(ss=ss.substring(ss.indexOf("_")+1,ss.length()));
	}
	
	/**
	 * 获取设备的电量信息？？？？？？？
	 */
	//@Test
	public void testgetDeviceStatusApi(){
		String deviceId="gh_127f2e348655_d2ed7f234225257e";
		String deviceType="gh_127f2e348655";
		String openID="oJ3fKwHXbgTHpaBcIgZlUepg2qRI";
		userLockService.getDeviceStatusApi(deviceId, deviceType, openID);
	}
	
	public static class Data {
		
		public String device_id;
		
		public String openid;
		public Data( String deviceId, String openId) {
			 this.device_id = deviceId;
			 this.openid = openId;
					 
		}
		 
		
	}
}
